The Redis-Sentinel on K8s
=========================

Requirements
============

Run a reliable and highly available redis-sentinel installation for multiple
tenants on kubernetes cluster.

What does reliable mean?
========================

Redis reliability is the ability to be consistent in terms of performance and
data across failures.
- Consitent backups(RDB)
- AOF
- Recovery process(Meant time between failures) RTO and RPO
- SLA

What does availability mean?
============================

The availability of the redis means that the system availabile inspite the 
underlying infrastructure failuers.
- Multi AZ
- Replicas
- Sentinel

Failure scenarios
=================
The following are some of the failure scenarios

- Infra failure
  = Node failure
  = AZ failure
  = Network failure
- K8s resource failures
  = Pod failures
  = Other component failures
- Seamless failover
- Sentinel Availablity

Operational Requirements
========================
- Ability consistently deploy Redis-Sentinel
  = Naming conventions
    - Consistent naming
    - Consistent labels
    - Consistent annotations
  = Ensure Reproduceability
    - Ability to recreate in case of failures
  = Ensure Discoverability
    - Sentinel to discover redis pods
  = Fail fast: Create all or none
- Ability upgrade Redis-Sentinel deployments
  = Resource upgrades
    + RAM
    + CPU
    + Storage
  = Service updates
    + Image version
    + Sidecar versions
  = Ensure data consistency
- Metrics and Logging
  = Infra Dashboards
  = Tenant Dashboards
  = Alerts
- Inegration with Non-K8s services
  = S3 for backups
  = Route53 for endpoints
  = EBS for persistence
- Downtime management
  = SOP for Service downtimes
  = 
- Migration
  = Existing Redis to New Redis(on K8s)
  = During infra upgrades

Operator Model
==============

+ Available Opensource Operators
+ ==============================

++ Spotahome Redis-Operator
++ ========================

apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: foo
  namespace: bar
spec:
  sentinel:
    replicas: 3
    resources:
      requests:
        cpu: 100m
      limits:
        memory: 100Mi
  redis:
    replicas: 3
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 400m
        memory: 500Mi

The above CRD would the following resources in the bar namespace

rfr-foo: Redis configmap
rfr-foo: Redis statefulset
rfr-foo: Redis service (if redis-exporter is enabled)
rfs-foo: Sentinel configmap
rfs-foo: Sentinel deployment
rfs-foo: Sentinel service

All these resources will be managed by the redis-operator

!!! Customizations can be applied to various resources as you would see below,
    except for the dir, host and port.

+++ Persistence
+++ ===========

apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: foo-persistent-with-keep
spec:
  sentinel:
    replicas: 3
  redis:
    replicas: 3
    storage:
      keepAfterDeletion: true
      persistentVolumeClaim:
        metadata:
          name: foo-persistent-data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi

- Volumes deleted when RedisFailover resource is deleted
- Use the keepAfterDeletion to Keep the volume
? Check with namespaces
? Check with EBS
? Pod restarts


+++ Distribution
+++ ============

Ref: https://bit.ly/3z09TW7

apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: foo
  namespace: bar
spec:
  sentinel:
    replicas: 3
  redis:
    replicas: 3
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - redis
              topologyKey: topology.kubernetes.io/zone

There are provisions for Distribution of pods, across zones using NodeAffinity,
PodAffinity and Tolerations.

+++ Configuration Changes
+++ =====================

apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: foo
  namespace: bar
spec:
  sentinel:
    replicas: 3
    customConfig:
      - "down-after-milliseconds 2000"
      - "failover-timeout 3000"
  redis:
    replicas: 3
    customConfig:
      - "maxclients 100"
      - "hz 50"
      - "timeout 60"
      - "tcp-keepalive 60"
      - "client-output-buffer-limit normal 0 0 0"
      - "client-output-buffer-limit slave 1000000000 1000000000 0"
      - "client-output-buffer-limit pubsub 33554432 8388608 60"

- customConfig to be used to push custom configurations to the both sentinel and
  redis.
- customConfig during runtime of redis/sentinel, are pushed using CONFIG SET
  command
? rollback to the default
? 


For the Redis-Sentinel Model there are not many K8s Operators, that are
maintained. Here are two operators.




Deployment Model
================

The kubernetes deployment model for the redis-sentinel will be namespaced per
tenant.
- Redis Statefulset
  - Pods with mulitple sidecars. Metrics etc
  - Storage attached for RDB snapshots and  AOF files
    = Evaluate EBS vs Root volume
  - Endpoint registration with route53 - non-sentinel-aware-clients
    = External-DNS
    = Failover binary as sidecar
  - Configurations would be passed as config maps
  
- Sentinel Deloyment
  - Why Deployment and not Statefulset? - Need a good justification.
    = Sentinel does not have state and local storage is not needed.
    = Reconstructing state of the sentinel is fairly simple
    = Having said thats my bias toward the spotohome's redis-operator has more
      to do with this decision than anything else.(raise an issue)
  - Non-sharded sentinels - one sentinel deployment per redis
    = Might run into more resource consumption issues for monitoring every
      redis(i guess this should be ok)
    = Since namespaced we might have to solve a different concern if shared(not 
      viable to solve at the moment)

- Kustomization templates
  - Standard agreed upon base templates needs to created
    = image name and version should be standard across deployments
    = security provisions should be standard across deployments
    = affinity rules can be standardized
  - Every tenant will inherits from base and applies customizations on top
    = Resoure requests and limits
    = Configs changes and Auth changes
 
Monitoring and Logging
======================

Standard hasyack/trigmetry commons deployment will be done on the EKS cluster.
- Redis exporter to run as sidecar per pod
- Every component deployed to expose a prometheus scrape endpoint
- All pods to write logs to standard out
- Grafana-agent/Cloud-agent to runs as a Daemonset on every node to ship metrics
- Filebeat to run as the Daemonset to every node to ship logs

Operational Requirements
========================
- Ability consistently deploy Redis-Sentinel
  = Naming conventions
    - Consistent naming
    - Consistent labels
    - Consistent annotations
  = Ensure Reproduceability
    - Ability to recreate in case of failures
  = Ensure Discoverability
    - Sentinel to discover redis pods
  = Fail fast: Create all or none
- Ability upgrade Redis-Sentinel deployments
  = Resource upgrades
    + RAM
    + CPU
    + Storage
  = Service updates
    + Image version
    + Sidecar versions
  = Ensure data consistency
- Metrics and Logging
  = Infra Dashboards
  = Tenant Dashboards
  = Alerts
- Inegration with Non-K8s services
  = S3 for backups
  = Route53 for endpoints
  = EBS for persistence
- Downtime management
  = SOP for Service downtimes
  = 
- Migration
  = Existing Redis to New Redis(on K8s)
  = During infra upgrades

Availability Requirements
=========================
- Infra failure
  = Node failure
  = AZ failure
  = Network failure
- K8s resource failures
  = Pod failures
  = Other component failures
- Seamless failover
- Sentinel Availablity

Reliability Requirements
========================
- Data consistency
- Perfomance / Latency
- SLA

Non-Operator Model
==================

Operator Model
==============

Since there are not many operators to choo
References
==========
Redis Troubleshooting: https://bit.ly/3OV4a9E
Redis Cell Architecture: https://bit.ly/3aB1LSx
Redis Tips: https://bit.ly/3nUwVr3
Redis Operator: https://bityl.co/DBhp
Redis K8s Failure: https://lkdin.io/3mBq
